---
- name: LAN | DHCP | configure dhcp server
  nvram:
    key: "{{ item.key }}"
    value: "{{ item.value }}"
    command: set
  loop:
    - key: dhcp_enable_x
      value: "{{ asus_merlin_lan_dhcp_enable | int }}"
    - key: dhcp_start
      value: "{{ asus_merlin_lan_dhcp_pool_start }}"
    - key: dhcp_end
      value: "{{ asus_merlin_lan_dhcp_pool_end }}"
    - key: dhcp_lease
      value: "{{ asus_merlin_lan_dhcp_lease }}"
    - key: dhcp_gateway_x
      value: "{{ asus_merlin_lan_dhcp_gateway }}"
    - key: dhcp_dns1_x
      value: "{{ asus_merlin_lan_dhcp_dns1 }}"
    - key: dhcp_dns2_x
      value: "{{ asus_merlin_lan_dhcp_dns2 }}"
    - key: dhcp_wins_x
      value: "{{ asus_merlin_lan_dhcp_wins }}"
    - key: dhcpd_dns_router
      value: "{{ asus_merlin_lan_dhcp_dns_router }}"
  notify:
    - nvram commit
    - restart dnsmasq

- name: LAN | DHCP | prepare static list
  ansible.builtin.set_fact:
    prepared_staticlist: "{{ prepared_staticlist | default([]) + [row_for_list] }}"
    inventory_clientlist: "{{ inventory_clientlist | default({}) | combine(row_for_dict) }}"
  vars:
    mac_address: "{{ item.mac_address | upper }}"
    ip_address: "{{ item.ip_address }}"
    dns_server: "{{ item.dns_server | default('') }}"
    hostname: "{{ item.hostname | default('') }}"
    row_for_list: "<{{ mac_address }}>{{ ip_address }}>{{ dns_server }}>{{ hostname }}"
    row_for_dict: "{{ {mac_address: item} }}"
  loop: "{{ asus_merlin_lan_dhcp_staticlist | default([]) }}"

- name: LAN | DHCP | configure static list
  nvram:
    key: dhcp_staticlist
    value: "{{ ( prepared_staticlist if prepared_staticlist is defined else [] ) | join('') }}"
    command: set
  notify:
    - nvram commit
    - restart dnsmasq

- name: LAN | DHCP | custom dnsmasq.conf.add
  ansible.builtin.template:
    src: dnsmasq.conf.add.j2
    dest: /jffs/configs/dnsmasq.conf.add
    group: root
    mode: '0664'
  notify:
    - restart dnsmasq

- name: LAN | DHCP | read custom clientlist
  nvram:
    key: custom_clientlist
    command: get
  register: output_custom_clientlist

- name: LAN | DHCP | current custom clientlist
  ansible.builtin.set_fact:
    current_clientlist: "{{ current_clientlist | default({}) | combine(row) }}"
  vars:
    splitted: "{{ item.split('>') }}"
    name: "{{ splitted.0 }}"
    mac_address: "{{ splitted.1 | upper }}"
    icon: "{{ splitted.3 }}"
    data: "{{ {'mac_address': mac_address, 'name': name, 'icon': icon} }}"
    row: "{{ {mac_address: data} }}"
  loop: "{{ output_custom_clientlist.value.split('<') }}"
  when: item

- name: LAN | DHCP | prepare new custom clientlist
  ansible.builtin.set_fact:
    custom_clientlist_new: "{{ custom_clientlist_new | default([]) + [row] }}"
  vars:
    current_item: "{{ current_clientlist[item] | default({}) }}"
    inventory_item: "{{ inventory_clientlist[item] | default({}) }}"
    data: "{{ current_item | combine(inventory_item) }}"
    description: "{{ data.description | default( data.hostname | default(data.name) ) }}"
    row: "<{{ description }}>{{ data.mac_address }}>0>{{ data.icon | default(69) }}>>"
  loop: "{{ current_clientlist | default({}) | combine(inventory_clientlist | default({}) ) | list }}"
  when:
    - "'icon' in data"

- name: LAN | DHCP | configure custom clientlist
  nvram:
    key: custom_clientlist
    value: "{{ custom_clientlist_new | join('') }}"
    command: set
  notify:
    - nvram commit
